{"version":3,"sources":["webpack:///./src/components/postCard.js","webpack:///./src/templates/postTemplate.js"],"names":["formatePostDate","dateString","date","Date","toLocaleDateString","month","day","year","PostCard","post","style","useThemeContext","className","to","fields","slug","frontmatter","title","postDate","data","layout","useSiteMetadata","markdownRemark","metaData","color","icon","ChevronLeft","size","verticalAlign","ariaLabel","dangerouslySetInnerHTML","__html","html","backgroundColor","maxWidth","query"],"mappings":"2FAAA,mFAIO,SAASA,EAAgBC,GAC9B,IAAMC,EAAO,IAAIC,KAAKF,GACtB,OAAUC,EAAKE,mBAAmB,QAAS,CAAEC,MAAO,UAApD,IAAkEH,EAAKE,mBAAmB,QAAS,CAAEE,IAAK,YAA1G,KAA2HJ,EAAKE,mBAAmB,QAAS,CAAEG,KAAM,YAoBvJC,IAjBf,YAA6B,IAATC,EAAQ,EAARA,KACVC,EAAUC,cAAVD,MACR,OACE,yBAAKE,UAAS,0BAAqC,SAAVF,EAAmB,aAAe,gCAA7D,2BACZ,yBAAME,UAAU,qDACd,wBAAIA,UAAU,wBACZ,kBAAC,IAAD,CAAMC,GAAIJ,EAAKK,OAAOC,MACnBN,EAAKO,YAAYC,SAIxB,yBAAKL,UAAU,4BAA4BZ,EAAgB,GAAGS,EAAKK,OAAOI,c,kCCpBhF,0JAUe,sBAAe,IAAZC,EAAW,EAAXA,KACRT,EAAUC,cAAVD,MACAU,EAAWC,cAAXD,OACFX,EAAOU,EAAKG,eAClB,OACE,kBAAC,IAAD,KACc,YAAXF,EACC,yBAAKR,UAAU,8CACb,kBAAC,IAAD,CAAUW,UAAU,IACpB,yBAAKX,UAAU,uEACb,uBAAGA,UAAU,MAAK,0BAAMA,UAAU,2BAA2BF,MAAO,CAAEc,MAAO,YAC3E,kBAAC,IAAD,CAASC,KAAMC,IAAaC,KAAM,GAAIC,cAAc,SAASC,UAAU,OAAOjB,UAAU,SACxF,kBAAC,IAAD,CAAMC,GAAG,KAAT,UAGF,wBAAID,UAAU,0BAA0BH,EAAKO,YAAYC,OACzD,uBAAGL,UAAS,SAAoB,SAAVF,EAAmB,aAAe,cAAxD,aACA,yBAAKoB,wBAAyB,CAAEC,OAAQtB,EAAKuB,UAIjD,yBAAKpB,UAAS,cAAyB,SAAVF,EAAmB,mBAAqB,KACnE,yBAAKE,UAAS,sBAAiC,SAAVF,EAAmB,eAAiB,8CAA3D,yDACZ,kBAAC,IAAD,CAAUa,UAAU,KAGtB,yBAAKX,UAAU,0EAA0EF,MAAO,CAAEuB,gBAA2B,SAAVvB,EAAmB,UAAY,YAChJ,yBAAKE,UAAU,UAAUF,MAAO,CAAEwB,SAAU,UAC1C,yBAAKtB,UAAS,OAAkB,SAAVF,EAAmB,aAAe,IAA1C,SACZ,yBAAKE,UAAS,OAAkB,SAAVF,GAAoB,eACxC,uBAAGE,UAAU,MACX,0BAAMA,UAAU,2BAA2BF,MAAO,CAAEc,MAAO,YACzD,kBAAC,IAAD,CAAMX,GAAG,IAAID,UAAS,6BAAwC,SAAVF,GAAoB,eACtE,kBAAC,IAAD,CAASe,KAAMC,IAAaC,KAAM,GAAIC,cAAc,SAASC,UAAU,OAAOjB,UAAU,SAD1F,UAMJ,wBAAIA,UAAU,0BAA0BH,EAAKO,YAAYC,OACzD,uBAAGL,WAAwB,SAAVF,EAAmB,aAAe,aAAvC,SAAZ,aAAkFV,YAAgB,GAAGS,EAAKK,OAAOI,WACjH,yBAAKY,wBAAyB,CAAEC,OAAQtB,EAAKuB,eAUxD,IAAMG,EAAK","file":"component---src-templates-post-template-js-f61293fc9b0561e24cf8.js","sourcesContent":["import React from 'react'\nimport { Link } from \"gatsby\"\nimport useThemeContext from \"../hooks/themeContext\"\n\nexport function formatePostDate(dateString) {\n  const date = new Date(dateString)\n  return `${date.toLocaleDateString('en-GB', { month: 'short' })} ${date.toLocaleDateString('en-GB', { day: 'numeric' })}, ${date.toLocaleDateString('en-GB', { year: 'numeric' })}`\n}\n\nfunction PostCard({ post }) {\n  const { style } = useThemeContext()\n  return (\n    <div className={`height-full text-left ${style === 'dark' ? 'box-shadow' : 'border border - gray - light'} bg-white rounded-1 p-3`}>\n      < div className=\"d-flex flex-justify-between flex-items-start mb-1\">\n        <h1 className=\"f4 lh-condensed mb-1\">\n          <Link to={post.fields.slug}>\n            {post.frontmatter.title}\n          </Link>\n        </h1>\n      </div>\n      <div className=\"text-gray mb-2 ws-normal\">{formatePostDate(`${post.fields.postDate}`)}</div>\n    </div>\n\n  )\n}\n\nexport default PostCard\n","import Octicon, { ChevronLeft } from '@primer/octicons-react'\nimport { graphql, Link } from 'gatsby'\nimport React from 'react'\n\nimport Layout from '../components/layout'\nimport MastHead from '../components/mastHead'\nimport { formatePostDate } from '../components/postCard'\nimport useSiteMetadata from '../hooks/siteMetaData'\nimport useThemeContext from '../hooks/themeContext'\n\nexport default ({ data }) => {\n  const { style } = useThemeContext()\n  const { layout } = useSiteMetadata()\n  const post = data.markdownRemark\n  return (\n    <Layout>\n      {layout === 'stacked' ?\n        <div className='container-lg py-5 p-responsive text-center'>\n          <MastHead metaData={false} />\n          <div className=\"container-md f4 text-left border rounded-2 bg-white p-3 p-sm-5 mt-6\">\n            <p className=\"f5\"><span className=\"d-flex flex-items-center\" style={{ color: \"#0366d6\" }}>\n              <Octicon icon={ChevronLeft} size={16} verticalAlign='middle' ariaLabel=\"Home\" className=\"mr-2\" />\n              <Link to='/'>Home</Link>\n            </span>\n            </p>\n            <h1 className=\"f00-light lh-condensed\">{post.frontmatter.title}</h1>\n            <p className={`mb-5 ${style === 'dark' ? 'text-white' : 'text-gray'}`}>Published</p>\n            <div dangerouslySetInnerHTML={{ __html: post.html }} />\n          </div>\n        </div>\n        :\n        <div className={`d-md-flex ${style !== 'dark' ? 'border-md-bottom' : ''}`}>\n          <div className={`flex-self-stretch ${style === 'dark' ? 'bg-gray-dark' : 'border-md-right border-gray-light bg-white'} col-md-5 col-lg-4 col-xl-3 px-4 px-md-6 px-lg-7 py-5`}>\n            <MastHead metaData={true} />\n          </div>\n\n          <div className='col-md-7 col-lg-8 col-xl-9 px-4 py-5 px-lg-7 border-top border-md-top-0' style={{ backgroundColor: style === 'dark' ? '#2f363d' : '#fafbfc' }}>\n            <div className='mx-auto' style={{ maxWidth: '900px' }}>\n              <div className={`f4 ${style === 'dark' ? 'text-white' : ''} mb-6`}>\n                <div className={`f4 ${style === 'dark' && 'text-white'}`}>\n                  <p className='f5'>\n                    <span className='d-flex flex-items-center' style={{ color: '#0366d6' }}>\n                      <Link to='/' className={`d-flex flex-items-center ${style === 'dark' && 'text-white'}`}>\n                        <Octicon icon={ChevronLeft} size={16} verticalAlign='middle' ariaLabel='Home' className='mr-2' />\n                        Home\n                      </Link>\n                    </span>\n                  </p>\n                  <h1 className=\"f00-light lh-condensed\">{post.frontmatter.title}</h1>\n                  <p className={`${style === 'dark' ? 'text-white' : 'text-gray'} mb-5`}>Published {formatePostDate(`${post.fields.postDate}`)}</p>\n                  <div dangerouslySetInnerHTML={{ __html: post.html }} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      }\n    </Layout>\n  )\n}\nexport const query = graphql`query($slug: String!) {\n  markdownRemark(fields: {slug: {eq: $slug } }) {\n  html\n  frontmatter {\n    title\n  }\n  fields {\n      postDate\n    }\n  }\n}`\n"],"sourceRoot":""}